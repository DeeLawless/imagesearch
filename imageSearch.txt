http://localhost:3000/ to start the app
http://localhost:3000/api/imagesearch/dog?offset=1 to get a record
To use mongoDB Compass: mongodb+srv://user:user@cluster0.hbe2i.mongodb.net/test
	This is the free test cluster I created

ToDo
http://localhost:3000/api/imagesearch/cow?offset=1 
returns 
[{"url":"https://live.staticflickr.com/7458/27321811510_e8777ff7d7_z.jpg","snippet":"Lazy cow","thumbnail":"https://live.staticflickr.com/7458/27321811510_e8777ff7d7_q.jpg","context":"https://www.flickr.com/photos/13668502@N05/27321811510"}]

change from staticflickr.com to CesiumAircraft ImageSearch table
DONE create new ImageSearch table with 
	url
	snippet
	thumbnail
	context

edge://inspect/#pages
This brings up all targets that can be inspected.  Find the green hexagon.  Click on inspect.
This brings up the debugging guide.

https://nodejs.org/en/docs/guides/debugging-getting-started/
https://www.youtube.com/watch?v=qZ3oFZkdGfU
https://www.youtube.com/watch?v=Xb_0awoShR8

IN BROWSER, TYPE 
about:inspect
These are inspectable targets - you'll see node
Click on dedicated Dev Tools for Node
Or open Chrome DevTools (F12) - see Node.js green icon - same way to get there
The dedicated window is great - make changes - dedicated window auto connects to the node

C:\Users\user\Source\Repos\imagesearch>node inspect app.js

INSPECT RUNS IT, TURNS ON THE DEBUGGER, AND PAUSES AT VERY FIRST STATEMENT OF THE SCRIPT
MAKE SURE BREAKPOINTS ARE IN PLACE
YOU WILL GET THIS:
< Debugger listening on ws://127.0.0.1:9229/7f376165-2286-42c5-87df-75727c1ca785
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
<
Break on start in app.js:25
 23
 24 //begin imagesearch code
>25 const express = require('express');
 26 const path = require('path');
 27 const mongo = require('mongodb').MongoClient;

TYPE C TO CONTINUE
debug> c
< (node:5468) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency
< (Use `node --trace-warnings ...` to show where the warning was created)
<
debug>

TYPE HELP TO GET COMMANDS

Web Server app, when run it, might get some errors but the console doesn't tell us much.
In Chrome app, open the dedicated Dev Tools for Node.

rt-click blockbox script to tell it to not step thru it
open another console. type arguments.
ctrl-D for multiple selection.

different approaches for debugging:
1. debug after starting: process._debugProcess(pid);
2. GBD-stype interface (command line): node inspect hello.js
3. drive w DevTools protocol via WS port 10:32
4. 2008 core inspector module: const require('inspector') 11:30

Tracing in Node
to understand what's happening in the browser
anything that is taking time
this capability is avail in node

**** Important to put the host, database, and collection!
const url = 'mongodb://localhost:27017/CesiumAircraft.ImageSearch';
http://localhost:3000/api/imagesearch/dog?offset=1
results:
[{"url":"https://live.staticflickr.com/1900/29509689827_8fb5fd812a_z.jpg","snippet":"Dog in the bluebells","thumbnail":"https://live.staticflickr.com/1900/29509689827_8fb5fd812a_q.jpg","context":"https://www.flickr.com/photos/97923098@N02/29509689827"}]
Note: Dog in the bluebells is the flickr snippet, not the mongodb db snippet field.

**** Next
DONE install mongodb for imagesearch
get imagesearch working with db
the hope is after that I can move references to the array out of server.js
DONE check in

mongodb+srv://mean123:mean123@cluster0.hbe2i.mongodb.net/test
created "test" database

added 2 records (just one ID field) to online test database/collection.

Connections:
MongoDB Compass:  
	tried this connection string from https://docs.mongodb.com/manual/reference/connection-string/#std-label-connections-standard-connection-string-format
	mongodb://mongos0.example.com:27017
	got this: getaddrinfo ENOTFOUND mongos0.example.com
	tried: mongodb://mongos0.test.com:27017
	got this: connect ETIMEDOUT 69.172.200.109:27017

	//with and without +srv, credentials, URL, collection
	tried both: Paste connection string and Fill in connection fields individually

	tried: mongodb+srv://user:user@cluster0.hbe2i.mongodb.net/test
	got this: connection <monitor> to 34.198.25.25:27017 closed
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net/test
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0.test.com:27017
	got this: connect ETIMEDOUT 69.172.200.109:27017
	tried: mongodb://cluster0.test.com
	got this: connect ETIMEDOUT 69.172.200.109:27017
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net/test
	got this: connect ETIMEDOUT 69.172.200.109:27017

	1. yes +srv, no credentials (no @), yes collection, all variations of URL
	tried: mongodb+srv://cluster0.hbe2i.mongodb.net/test
	got this: directConnection not supported with SRV URI
	tried: mongodb+srv://cluster0.hbe2i.mongodb.net/test
	got this: URI contained empty userinfo section
	tried: mongodb+srv://user:user@cluster0.hbe2i.mongodb.net/test
		   mongodb+srv://user:user@cluster0.hbe2i.mongodb.net/test
	got this: directConnection not supported with SRV URI	****different error message than #1 above

	2. no +srv, no credentials (no @), yes collection, no port, all variations of URL
	tried: mongodb://cluster0.hbe2i.mongodb.net/test
	got this: directConnection not supported with SRV URI
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net/test
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net:27017
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0.hbe2i.mongodb.net
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0.hbe2i.mongodb.net/test:27017
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0.hbe2i.mongodb.net/test
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0.mongodb.net/test
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://cluster0/test
	got this: getaddrinfo ENOTFOUND cluster0


	2. no +srv, no credentials (no @), yes collection, yes port, whole URL
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net/test:27017
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net
	tried: mongodb://user:user@cluster0.hbe2i.mongodb.net:27017
	got this: getaddrinfo ENOTFOUND cluster0.hbe2i.mongodb.net

	3. 
	tried: mongodb://127.0.0.1:27017
	got this: read ECONNRESET
	tried: mongodb://127.0.0.1:27017/test
	got this: read ECONNRESET
	tried: mongodb://user:user@127.0.0.1:27017/test
	got this: read ECONNRESET
	tried: mongodb://user:user@127.0.0.1/test
	got this: read ECONNRESET
	tried: mongodb://user:user@127.0.0.1
	got this: read ECONNRESET
	tried: mongodb://user:user@127.0.0.1/admin
	got this: read ECONNRESET


The connection URI is the set of instructions that the driver uses to connect to a MongoDB deployment. It instructs the driver on how it should connect to MongoDB and how it should behave while connected. The following example shows each part of the connection URI:
	mongodb+srv://	user:pass	@	sample.host:27017 /	?poolSize=20&writeConcern=majority
	protocol		credentials		hostname/IP and		connection options
									port of instance(s)
Each part of the connection string
In this example, for the protocol, we use mongodb+srv which specifies the DNS Seedlist Connection Format. This indicates that the hostname following it corresponds to the DNS SRV record of your MongoDB instance or deployment. 
If your instance or deployment does not have a DNS SRV record, use mongodb to specify the Standard Connection Format.

Standard Connection String Format sharded cluster
mongodb://mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017
Standard Connection String Format sharded cluster that enforces access control
mongodb://myDBReader:D1fficultP%40ssw0rd@mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017/?authSource=admin
For a standalone:
mongodb://mongodb0.example.com:27017
For a standalone that enforces access control:
mongodb://myDBReader:D1fficultP%40ssw0rd@mongodb0.example.com:27017/?authSource=admin

sharding
A database architecture that partitions data by key ranges and distributes the data among two or more database instances. Sharding enables horizontal scaling. See Sharding.
